// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using AquariumMVC.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace AquariumMVC.Models
{
    public partial class aquariumwebsiteContext
    {
        private IaquariumwebsiteContextProcedures _procedures;

        public virtual IaquariumwebsiteContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new aquariumwebsiteContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IaquariumwebsiteContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<alldetail>().HasNoKey().ToView(null);
            modelBuilder.Entity<Size_priceResult>().HasNoKey().ToView(null);
        }
    }

    public partial class aquariumwebsiteContextProcedures : IaquariumwebsiteContextProcedures
    {
        private readonly aquariumwebsiteContext _context;

        public aquariumwebsiteContextProcedures(aquariumwebsiteContext context)
        {
            _context = context;
        }

        public virtual async Task<List<alldetail>> alldetailAsync(string P_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "P_id",
                    Size = 8,
                    Value = P_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<alldetail>("EXEC @returnValue = [dbo].[alldetail] @P_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Size_priceResult>> Size_priceAsync(string P_id, int? A_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "P_id",
                    Size = 8,
                    Value = P_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "A_id",
                    Value = A_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Size_priceResult>("EXEC @returnValue = [dbo].[Size_price] @P_id, @A_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
